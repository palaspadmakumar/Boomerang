//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/source/com/hellion/shape_generator/Demo/KeyBinding/ShapeGeneratorKeyBinding.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ShapeGeneratorKeyBinding : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ShapeGeneratorKeyBinding()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ShapeGeneratorKeyBinding"",
    ""maps"": [
        {
            ""name"": ""ShapeDemoMap"",
            ""id"": ""19a8885a-0858-4240-8887-b11377b738d9"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""a94c7423-26e8-4fee-843c-d71545c2c580"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""1eac61af-bd8c-4203-88d4-5e9de1566508"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""8433c740-001b-452b-84c6-1c6297a321c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""50262f17-0f83-46db-80ef-19f269bf6fd0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5302b8d0-0d85-4d39-a2a1-d5673cea69ed"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10ac9d46-83ee-4a8e-9826-b811f054f2ef"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36ee8d7e-3cc5-49e1-9f36-1929edc8c52b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ShapeDemoMap
        m_ShapeDemoMap = asset.FindActionMap("ShapeDemoMap", throwIfNotFound: true);
        m_ShapeDemoMap_Left = m_ShapeDemoMap.FindAction("Left", throwIfNotFound: true);
        m_ShapeDemoMap_Right = m_ShapeDemoMap.FindAction("Right", throwIfNotFound: true);
        m_ShapeDemoMap_Click = m_ShapeDemoMap.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShapeDemoMap
    private readonly InputActionMap m_ShapeDemoMap;
    private IShapeDemoMapActions m_ShapeDemoMapActionsCallbackInterface;
    private readonly InputAction m_ShapeDemoMap_Left;
    private readonly InputAction m_ShapeDemoMap_Right;
    private readonly InputAction m_ShapeDemoMap_Click;
    public struct ShapeDemoMapActions
    {
        private @ShapeGeneratorKeyBinding m_Wrapper;
        public ShapeDemoMapActions(@ShapeGeneratorKeyBinding wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_ShapeDemoMap_Left;
        public InputAction @Right => m_Wrapper.m_ShapeDemoMap_Right;
        public InputAction @Click => m_Wrapper.m_ShapeDemoMap_Click;
        public InputActionMap Get() { return m_Wrapper.m_ShapeDemoMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShapeDemoMapActions set) { return set.Get(); }
        public void SetCallbacks(IShapeDemoMapActions instance)
        {
            if (m_Wrapper.m_ShapeDemoMapActionsCallbackInterface != null)
            {
                @Left.started -= m_Wrapper.m_ShapeDemoMapActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_ShapeDemoMapActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_ShapeDemoMapActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_ShapeDemoMapActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_ShapeDemoMapActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_ShapeDemoMapActionsCallbackInterface.OnRight;
                @Click.started -= m_Wrapper.m_ShapeDemoMapActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_ShapeDemoMapActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_ShapeDemoMapActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_ShapeDemoMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public ShapeDemoMapActions @ShapeDemoMap => new ShapeDemoMapActions(this);
    public interface IShapeDemoMapActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
